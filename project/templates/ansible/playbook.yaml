---
- name: "Play1"
  hosts: localhost
  vars:
    ansible_connection: local
    ansible_python_interpreter: /usr/bin/python3
    ssh_key_path: /root/.ssh/id_rsa.pub
  vars_prompt:

    - name: commands 
      prompt: |
        
        ===============================================================
        Terraform main commands:
        (1) apply   - ( Create or update infrastructure )
        (2) destroy - ( Destroy previously-created infrastructure )
        (3) exit
        ===============================================================
      private: false

  tasks:
    
    ####################################################################################################
    #Exit
    ####################################################################################################
    - name: "Exit playbook"
      meta: end_play
      when: commands == "3" 
    ####################################################################################################
    
    - name: "CAT id_rsa.pub => vars"
      shell: "cat {{ ssh_key_path }}"
      register: ssh_key    
    - name: "Copy meta content"
      copy:
        content: |
          #cloud-config
          ssh_pwauth: no
          users:
            - name: admin
              sudo: ALL=(ALL) NOPASSWD:ALL
              shell: /bin/bash
              ssh_authorized_keys:
                - {{ ssh_key.stdout }}
        dest: "{{ playbook_dir }}/meta.yaml"

    - debug: 
        msg: 
        - "{{ playbook_dir }}"
        - "{{ ansible_python_interpreter }}"
    
    ####################################################################################################
    #Terraform commands
    ####################################################################################################

    - name: "Terraform destroy"
      command: terraform destroy -no-color -input=false -auto-approve=true
      args:
        chdir: "{{ playbook_dir }}"
      delegate_to: localhost
      become: true     
      register: destroy
      when: commands == "2"

    - debug: 
        msg: "{{ destroy }}"
      when: commands == "2"

    - name: "Terraform rm file"
      shell: rm terraform.*
      args:
        chdir: "{{ playbook_dir }}"
      delegate_to: localhost
      become: true     
      register: rm_file
      when: commands == "2"

    - name: "Terraform init"
      command: terraform init
      args:
        chdir: "{{ playbook_dir }}"
      delegate_to: localhost
      become: true     
      when: commands == "1"

    - name: "Terraform aplly"
      command: terraform apply -no-color -input=false -auto-approve=true
      args:
        chdir: "{{ playbook_dir }}"
      delegate_to: localhost
      become: true     
      register: aplly
      when: commands == "1"

    - debug: 
        msg: "{{ aplly }}"
      when: commands == "1"
    ####################################################################################################

    ####################################################################################################
    # Refresh_inventory
    ####################################################################################################
    - name: "Refresh inventory and pause 30 sec"
      meta: refresh_inventory
    - pause:
        seconds: 30
      when: commands == "1"
    ####################################################################################################

    ####################################################################################################
    # Install nginx
    ####################################################################################################

- name: "Play2"
  hosts: nginx-netology
  become: true
  tasks:   
      
    - name: "Install - nginx"
      apt:
        name: nginx
        state: latest
  
    - name: "Start service - nginx"
      service:
        name: nginx
        state: restarted

    - name: "Enabled - nginx"
      service:
        name: nginx
        enabled: yes

    ####################################################################################################
    # Local check URL - 200
    ####################################################################################################

    - name: "Local Check URL 200"
      uri: url=http://{{ ansible_host }}/ status_code=200
      delegate_to: localhost
      register: url_check
    
    - debug:
        msg:
        - "{{ url_check }}" 
        - "{{ url_check.status }}"
   ####################################################################################################

   
   ####################################################################################################


    ####################################################################################################
    # Install postgresql
    ####################################################################################################

- name: "Play3"
  hosts: postgrest-netology
  become: true
  tasks: 
 
    - name: "Install - postgresql"
      apt:
        name: postgresql
        state: latest
        update_cache: yes
  
    - name: "Start service - postgresql"
      service:
        name: postgresql
        state: restarted

    - name: "Enabled - postgresql"
      service:
        name: postgresql
        enabled: yes

    - name: "Check postgresql"
      shell: "systemctl status postgresql"
      register: cmd
    
    - debug:
        msg: "{{ cmd.stdout_lines }}"     

    ####################################################################################################
...      
